import telebot
import json
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç BotFather
TOKEN = '7558450757:AAGD8hw5Ohovquir5jmIaExYSfAG1M609CE'
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID)
ADMIN_ID = 7853333670

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CHANNELS_FILE = '112channels.json'
VPN_KEYS_FILE = '112vpn_keys.json'
USERS_FILE = '112users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data(filename, default):
    try:
        with open(filename, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return default

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data, filename):
    with open(filename, 'w') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
def escape_markdown(text):
    special_chars = ['*', '_', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ–ª–Ω—ã–π URL
def format_channel_url(link):
    if link.startswith('@'):
        return f"https://t.me/{link[1:]}"
    elif link.startswith('https://t.me/'):
        return link
    else:
        return f"https://t.me/{link}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
channels = load_data(CHANNELS_FILE, [])
vpn_keys = load_data(VPN_KEYS_FILE, ["vpn_key1"])  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏
users = load_data(USERS_FILE, [])  # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
def add_user(user_id):
    if user_id not in users:
        users.append(user_id)
        save_data(users, USERS_FILE)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    add_user(message.from_user.id)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        full_url = format_channel_url(channel['link'])
        display_name = escape_markdown(channel['name'])
        try:
            keyboard.add(types.InlineKeyboardButton(f" {display_name}", url=full_url))
        except telebot.apihelper.ApiTelegramException as e:
            bot.send_message(message.chat.id, f"‚ùå √ùal≈ày≈ülyk kanal go≈üulmady: {e.description}")
    keyboard.add(types.InlineKeyboardButton("üîç Agza boldum", callback_data="check_subscription"))
    welcome_text = (
        "üëã *Salam!* VPN a√ßar almak √º√ßin a≈üakdaky kanallara agza bolu≈à we agza boldum d√ºwm√§ basy≈à:"
        f"{'H√§zirlik√ße kanallar √Ωok.' if not channels else ''}"
    )
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –≤—ã–¥–∞—á–∞ –∫–ª—é—á–∞
@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def check_subscription(call):
    user_id = call.from_user.id
    all_subscribed = True

    for channel in channels:
        try:
            member = bot.get_chat_member(channel['id'], user_id)
            if member.status == 'left':
                all_subscribed = False
                break
        except Exception:
            all_subscribed = False
            break

    if all_subscribed and channels:
        if vpn_keys:
            key = vpn_keys[0]
            escaped_key = escape_markdown(key)
            bot.send_message(
                call.from_user.id,
                f"üéâ *Sizi≈à VPN a√ßary≈àyz:* `{escaped_key}`\n‚ú® Agza boluny≈àyz √º√ßin sagbolu≈à!",
                parse_mode="Markdown"
            )
        else:
            bot.send_message(call.from_user.id, "‚ùå A√ßarlar gutardy. Admin bilen habarla≈üy≈à!")
    else:
        bot.send_message(
            call.from_user.id,
            "‚ö†Ô∏è Siz √§hli kanallara Agza bolmady≈àyz. Agza bolu≈à we t√§zeden synany≈üy≈à!"
        )
    bot.answer_callback_query(call.id, "Barlag tamamlandy")

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['admin'], func=lambda message: message.from_user.id == ADMIN_ID)
def admin_panel(message):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("‚ûï Kanal go≈ü", callback_data="add_channel"),
        types.InlineKeyboardButton("‚ûñ Kanal a√Ωyr", callback_data="remove_channel")
    )
    keyboard.add(
        types.InlineKeyboardButton("üìã Kanallary≈à sanawy", callback_data="list_channels"),
        types.InlineKeyboardButton("üìä Statistikalar", callback_data="show_stats")
    )
    keyboard.add(
        types.InlineKeyboardButton("üì© √ùa√Ωlym", callback_data="start_broadcast"),
        types.InlineKeyboardButton("üîê VPN go≈ü", callback_data="add_vpn")
    )
    keyboard.add(
        types.InlineKeyboardButton("üóëÔ∏è VPN a√Ωyr", callback_data="remove_vpn")
    )
    bot.send_message(
        message.chat.id,
        "üîß *Admin paneli:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == "add_channel")
def add_channel_start(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    bot.send_message(
        call.from_user.id,
        "üì© Kanaly≈à ssylkasyny we adyny √Ωazy≈à (meselem: @mychannel Ady).\n"
        "Kanaly go≈ümak isle√Ω√§rsi≈àizmi?:",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler_by_chat_id(call.from_user.id, process_add_channel_inline)
    bot.answer_callback_query(call.id)

def process_add_channel_inline(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –∏–º—è
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            raise ValueError("Kanaly≈à ssylkasyny we adyny √Ωazy≈à (meselem: @mychannel Ady)")
        
        link = parts[0].strip()  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Å—Å—ã–ª–∫–∞
        name = parts[1].strip()  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ‚Äî –∏–º—è
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏
        if link.startswith("https://t.me/"):
            chat_id = link.replace("https://t.me/", "@")
        elif link.startswith("@"):
            chat_id = link
        else:
            raise ValueError("Ssylka @ √Ωa-da https://t.me/ bilen ba≈ülamaly")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        chat = bot.get_chat(chat_id)
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
        escaped_name = escape_markdown(name)
        escaped_link = escape_markdown(link)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ Howa", callback_data=f"confirm_add_channel_{chat.id}_{link}_{name}"),
            types.InlineKeyboardButton("‚ùå √ùatyr", callback_data="cancel_action")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        bot.send_message(
            message.chat.id,
            f"Kanal: *{escaped_name}* ({escaped_link})\nGo≈ümak √º√ßin howa d√ºwm√§ basy≈à:\n"
            f"[Debug] Link: {link}, Name: {name}",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except ValueError as ve:
        bot.send_message(message.chat.id, f"‚ùå √ùal≈ày≈ülyk: {str(ve)}. Ssylka≈à formatyny barla≈à.")
    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 400 and "chat not found" in e.description.lower():
            bot.send_message(
                message.chat.id,
                "‚ùå √ùal≈ày≈ülyk: Kanal tapylmady. ≈ûuny barla≈à:\n"
                "1. Ssylka dogry (@mychannel √Ωa-da https://t.me/mychannel).\n"
                "2. Bot kanala administrator h√∂km√ºnde go≈üuldy."
            )
        else:
            bot.send_message(message.chat.id, f"‚ùå Telegram API √Ωal≈ày≈ülygy: {e.description}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå N√§belli √Ωal≈ày≈ülyk: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_add_channel_"))
def confirm_add_channel(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    data = call.data.split("_")[3:]  # chat_id, link, name
    chat_id, link, name = data[0], data[1], " ".join(data[2:])
    channels.append({"id": int(chat_id), "link": link, "name": name})
    save_data(channels, CHANNELS_FILE)
    bot.send_message(call.from_user.id, f"‚úÖ Kanal *{escape_markdown(name)}* √ºst√ºnlikli go≈üuldy!", parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == "remove_channel")
def remove_channel_start(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    if not channels:
        bot.send_message(call.from_user.id, "üì≠ Kanallary≈à sanawy bo≈ü.")
        bot.answer_callback_query(call.id)
        return
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        keyboard.add(types.InlineKeyboardButton(f" {channel['name']}", callback_data=f"del_channel_{channel['name']}"))
    bot.send_message(
        call.from_user.id,
        "üóëÔ∏è A√Ωyrmak √º√ßin kanaly sa√Ωla≈à:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_channel_"))
def process_remove_channel(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    channel_name = call.data.replace("del_channel_", "")
    global channels
    channels = [c for c in channels if c['name'] != channel_name]
    save_data(channels, CHANNELS_FILE)
    bot.send_message(call.from_user.id, f"‚úÖ Kanal *{escape_markdown(channel_name)}* a√Ωyryldy!", parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "list_channels")
def list_channels(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    if channels:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for channel in channels:
            full_url = format_channel_url(channel['link'])
            display_name = escape_markdown(channel['name'])
            try:
                keyboard.add(types.InlineKeyboardButton(f" {display_name}", url=full_url))
            except telebot.apihelper.ApiTelegramException as e:
                bot.send_message(call.from_user.id, f"‚ùå √ùal≈ày≈ülyk kanal g√∂rkezilmedi: {e.description}")
        bot.send_message(
            call.from_user.id,
            "üìú *H√§zirki kanallar:*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(call.from_user.id, "üì≠ Kanallary≈à sanawy bo≈ü.")
    bot.answer_callback_query(call.id)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "show_stats")
def show_stats(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    total_keys = len(vpn_keys)
    total_users = len(users)
    stats = (
        "üìä *Botu≈à statistikasy:*\n"
        f"üîë Jemi VPN a√ßarlary: {total_keys}\n"
        f"üë• Jemi ulanyjylar: {total_users}"
    )
    bot.send_message(call.from_user.id, stats, parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.callback_query_handler(func=lambda call: call.data == "start_broadcast")
def start_broadcast(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    bot.send_message(
        call.from_user.id,
        "üì¨ √ùa√Ωlym √º√ßin habary √Ωazy≈à we dogrulamak √º√ßin d√ºwm√§ basy≈à:",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler_by_chat_id(call.from_user.id, process_broadcast_inline)
    bot.answer_callback_query(call.id)

def process_broadcast_inline(message):
    broadcast_text = message.text
    escaped_text = escape_markdown(broadcast_text)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("‚úÖ Iber", callback_data=f"confirm_broadcast_{broadcast_text}"),
        types.InlineKeyboardButton("‚ùå √ùatyr", callback_data="cancel_action")
    )
    bot.send_message(
        message.chat.id,
        f"√ùa√Ωlym habary: *{escaped_text}*\niberiljekmi?",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_broadcast_"))
def confirm_broadcast(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    broadcast_text = "_".join(call.data.split("_")[2:])
    escaped_text = escape_markdown(broadcast_text)
    success_count = 0
    fail_count = 0
    
    for user_id in users:
        try:
            bot.send_message(user_id, f"üì¢ *Paradox Sponsor:*\n{escaped_text}", parse_mode="Markdown")
            success_count += 1
        except Exception:
            fail_count += 1
    
    bot.send_message(
        call.from_user.id,
        f"‚úÖ √ùa√Ωlym tamamlandy!\n"
        f"üë• Iberildi: {success_count}\n"
        f"‚ùå Iberilmedi: {fail_count}",
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ VPN –∫–ª—é—á–∞
@bot.callback_query_handler(func=lambda call: call.data == "add_vpn")
def add_vpn_start(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    bot.send_message(
        call.from_user.id,
        "üîê T√§ze VPN a√ßar √Ωazy≈à we dogrulamak √º√ßin d√ºwm√§ basy≈à:",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler_by_chat_id(call.from_user.id, process_add_vpn_inline)
    bot.answer_callback_query(call.id)

def process_add_vpn_inline(message):
    key = message.text.strip()
    if key:
        escaped_key = escape_markdown(key)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton("‚úÖ Dogrula", callback_data=f"confirm_add_vpn_{key}"),
            types.InlineKeyboardButton("‚ùå √ùatyr", callback_data="cancel_action")
        )
        bot.send_message(
            message.chat.id,
            f"T√§ze VPN a√ßar: *{escaped_key}*\nGo≈ümak √º√ßin dogrula≈à:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, "‚ùå A√ßar bo≈ü bolup bilmez!")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_add_vpn_"))
def confirm_add_vpn(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    key = call.data.replace("confirm_add_vpn_", "")
    if key not in vpn_keys:
        vpn_keys.append(key)
        save_data(vpn_keys, VPN_KEYS_FILE)
        bot.send_message(call.from_user.id, f"‚úÖ VPN a√ßar *{escape_markdown(key)}* go≈üuldy!", parse_mode="Markdown")
    else:
        bot.send_message(call.from_user.id, "‚ùå Bu a√ßar e√Ω√Ω√§m bar!")
    bot.answer_callback_query(call.id)

# –£–¥–∞–ª–µ–Ω–∏–µ VPN –∫–ª—é—á–∞
@bot.callback_query_handler(func=lambda call: call.data == "remove_vpn")
def remove_vpn_start(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    if not vpn_keys:
        bot.send_message(call.from_user.id, "üîê VPN a√ßarlary≈à sanawy bo≈ü.")
        bot.answer_callback_query(call.id)
        return
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for key in vpn_keys:
        keyboard.add(types.InlineKeyboardButton(f"üîë {key}", callback_data=f"del_vpn_{key}"))
    bot.send_message(
        call.from_user.id,
        "üóëÔ∏è A√Ωyrmak √º√ßin VPN a√ßary sa√Ωla≈à:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_vpn_"))
def process_remove_vpn(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "Size rugsat √Ωok!")
        return
    key = call.data.replace("del_vpn_", "")
    global vpn_keys
    vpn_keys = [k for k in vpn_keys if k != key]
    save_data(vpn_keys, VPN_KEYS_FILE)
    bot.send_message(call.from_user.id, f"‚úÖ VPN a√ßar *{escape_markdown(key)}* a√Ωyryldy!", parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "cancel_action")
def cancel_action(call):
    bot.send_message(call.from_user.id, "‚ùå Amal √Ωatyryldy.", parse_mode="Markdown")
    bot.answer_callback_query(call.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)